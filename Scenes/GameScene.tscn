[gd_scene load_steps=65 format=2]

[ext_resource path="res://Sprites/Background/HouseBroken.png" type="Texture" id=1]
[ext_resource path="res://Sprites/Background/House.png" type="Texture" id=2]
[ext_resource path="res://Sprites/Background/SmokeParticle.png" type="Texture" id=3]
[ext_resource path="res://Sprites/Background/white_circle.png" type="Texture" id=4]
[ext_resource path="res://Sprites/Background/Bg1.png" type="Texture" id=5]
[ext_resource path="res://Sprites/Background/Bg2.png" type="Texture" id=6]
[ext_resource path="res://Sprites/Background/Star2.png" type="Texture" id=7]
[ext_resource path="res://Sprites/Background/Bg3.png" type="Texture" id=8]
[ext_resource path="res://Sprites/Background/Star3.png" type="Texture" id=9]
[ext_resource path="res://Object/Player.tscn" type="PackedScene" id=10]
[ext_resource path="res://Fonts/overload.ttf" type="DynamicFontData" id=11]
[ext_resource path="res://Sprites/Collectables/Magnet.png" type="Texture" id=12]
[ext_resource path="res://Sprites/Collectables/Coin.png" type="Texture" id=13]
[ext_resource path="res://Sprites/Collectables/Fish.png" type="Texture" id=14]
[ext_resource path="res://Sprites/UI/PauseButton.png" type="Texture" id=15]
[ext_resource path="res://Sprites/UI/PauseButtonPressed.png" type="Texture" id=16]
[ext_resource path="res://Scenes/FuelBar.tscn" type="PackedScene" id=17]
[ext_resource path="res://Scenes/PausePanel.tscn" type="PackedScene" id=18]
[ext_resource path="res://Sprites/PowerUps/AegisWings.png" type="Texture" id=19]
[ext_resource path="res://Object/Enemies/Kite.tscn" type="PackedScene" id=20]
[ext_resource path="res://Object/Enemies/Bulldog.tscn" type="PackedScene" id=21]
[ext_resource path="res://Scenes/ConfigPanel.tscn" type="PackedScene" id=24]
[ext_resource path="res://Scenes/DeadPanel.tscn" type="PackedScene" id=25]
[ext_resource path="res://Sprites/Tutorial/PawTutorial.png" type="Texture" id=26]
[ext_resource path="res://Scenes/InitialDarker.tscn" type="PackedScene" id=27]
[ext_resource path="res://Scenes/TransitionScene.tscn" type="PackedScene" id=28]
[ext_resource path="res://Sprites/Cat/CatHead.png" type="Texture" id=29]
[ext_resource path="res://Object/Collectable/CoinCluster.tscn" type="PackedScene" id=30]
[ext_resource path="res://Object/Collectable/Fish.tscn" type="PackedScene" id=31]
[ext_resource path="res://Object/PowerUp/FuelCan.tscn" type="PackedScene" id=32]
[ext_resource path="res://Object/PowerUp/Magnet.tscn" type="PackedScene" id=33]
[ext_resource path="res://Object/PowerUp/AegisWings.tscn" type="PackedScene" id=34]
[ext_resource path="res://Object/Enemies/PaperPlane.tscn" type="PackedScene" id=35]
[ext_resource path="res://Object/Enemies/Bird.tscn" type="PackedScene" id=36]
[ext_resource path="res://Object/Enemies/Condor.tscn" type="PackedScene" id=37]
[ext_resource path="res://Object/Enemies/Ovni.tscn" type="PackedScene" id=38]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

var playing : bool = false
var player_height : int = 0
var fuel : int = 0
var end_play : bool = false
var highscore_passed : bool = false
export (Texture) var house_broken

onready var tutorial_done : bool = GameManager.tutorial_done

func _ready():
	AudioManager.create_soundtrack()
	$UIGame/UI/RestartTransition.hide()
	player_height = 0
	GameManager.reset_stats()
	$UIGame.update_UI_labels()
	if GameManager.easter:
		$House/Sprite.texture = house_broken
	if tutorial_done:
		$UIGame.set_tutorial_done()
	AdsManager.connect(\"interstitial_closed\", self, \"on_interstitial_closed\")
	AdsManager.connect(\"interstitial_failed\", self, \"on_interstitial_failed\")
	pass

func _input(event):
	if event is InputEventKey and !event.is_echo() and event.is_pressed():
		if event.scancode == KEY_1:
			add_fuel()
	pass

func start_game():
	playing = !playing
	GameManager.playing = playing
	pass

func _on_Player_start_playing():
	start_game()
	pass # Replace with function body.

func add_fuel():
	fuel += 1
	if fuel % 10 == 0 and fuel > 1:
		fuel = 0
		$Player.fuel_master()
	$UIGame.add_fuel(fuel)
	pass

func add_fish(val):
	GameManager.fishes += val
	$UIGame.update_fishes_label()
	pass

func add_coin(val):
	GameManager.coins += val
	$UIGame.update_coin_label()
	pass

func update_height(val):
	if val > player_height:
		player_height = val
		GameManager.player_height = player_height
		$UIGame.update_meters_label()
	pass

func _on_Player_current_height(value):
	update_height(value)
	pass # Replace with function body.

func end_game():
	if GameManager.highscore < player_height:
		GameManager.highscore = player_height
		highscore_passed = true
	GameManager.fuel = fuel
	playing = !playing
	$UIGame.show_deadpanel(player_height, highscore_passed)
	if !GameManager.tutorial_done:
		GameManager.tutorial_done = true
		$UIGame.set_tutorial_done()
	GameManager.save_game_data()
	GameManager.player_height = 0
	GameManager.upload_highscore()
	pass

func _on_Player_dead():
	end_game()
	pass # Replace with function body.

func restart_game():
	get_tree().reload_current_scene()
	pass

func _on_Currency_button_down():
	GameManager.coins = 99999
	GameManager.fishes = 99999
	$UIGame.update_UI_labels()
	GameManager.save_game_data()
	pass # Replace with function body.

func _on_Button_button_down():
	$UIGame/DebugPanel.hide()
	pass # Replace with function body.

func _on_DebugButton_button_down():
	$UIGame/DebugPanel.show()
	pass # Replace with function body.

func _on_ResetGame_button_down():
	GameManager.reset_game_state()
	pass # Replace with function body.

func _on_Height_gui_input(event):
	if event is InputEventKey:
		if event.scancode == KEY_ENTER:
			if $UIGame/DebugPanel/VBoxContainer/Height.text != '':
				var height = int($UIGame/DebugPanel/VBoxContainer/Height.text)
				$Player._on_Invencible_button_down()
				$Player.global_position = Vector2($Player.position.x,-height * 100)
	pass # Replace with function body.

func _on_ToggleEnemies_toggled(button_pressed):
	$EnemySpawner.activated = button_pressed
	pass # Replace with function body.

func _on_ToggleCollectables_toggled(button_pressed):
	$ItemClusterSpawner.activated = button_pressed
	pass # Replace with function body.

func _on_Music_toggled(button_pressed):
	if button_pressed:
		$Music.stream = load('res://Sounds/Music/Game.ogg')
	else:
		$Music.stream = load('res://Sounds/Music/CCF Theme.ogg')
	$Music.play()
	pass # Replace with function body.

func _on_ComboButton_button_down():
	add_fuel()
	pass # Replace with function body.

func _on_DeadPanel_restart_game():
	GameManager.add_run()
	if GameManager.can_show_interstitial():
		AdsManager.show_interstitial()
	else:
		show_restart_anim()
	pass # Replace with function body.

func _on_RestAnim_animation_finished(anim_name):
	restart_game()
	pass # Replace with function body.

func on_interstitial_closed():
	show_restart_anim()
	pass

func on_interstitial_failed():
	show_restart_anim()
	pass

func show_restart_anim():
	$UIGame/UI/RestartTransition.show()
	$UIGame/UI/RestartTransition/RestAnim.play('Start')
	pass
"

[sub_resource type="GDScript" id=2]
script/source = "extends Node2D

func _on_VisibilityNotifier2D_screen_exited():
	$CPUParticles2D.emitting = false
	visible = false
	set_process(false)
	pass # Replace with function body.

func _process(delta):
	var dist = $CatShadow.position.distance_to(GameManager.player.position)
	$CatShadow.modulate.a = 100.0 / dist
	$CatShadow.position.x = GameManager.player.position.x
	pass
"

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 51.2298, 12.5829 )

[sub_resource type="Gradient" id=4]
colors = PoolColorArray( 0.730469, 0.730469, 0.730469, 1, 0, 0, 0, 0 )

[sub_resource type="GDScript" id=5]
script/source = "extends ParallaxBackground

export var space_height : int
export (Array, Color) var color_list
var color_idx = 0
var on_space : bool = false

func set_background_darker(value):
	if value > color_idx * space_height / color_list.size() and !$Tween.is_active():
		$Tween.remove_all()
		$Tween.interpolate_property($ParallaxLayer/Bg1,'self_modulate',
		$ParallaxLayer/Bg1.self_modulate, color_list[color_idx], 2, Tween.TRANS_LINEAR,Tween.EASE_IN)
		$Tween.start()
		color_idx += 1
	pass

func change_to_space():
	on_space = !on_space
	$Tween.stop_all()
	$Tween.interpolate_property($ParallaxLayer/Bg1,'self_modulate',$ParallaxLayer/Bg1.self_modulate, Color.black, 2, Tween.TRANS_LINEAR,Tween.EASE_IN)
	$Tween.interpolate_property($ParallaxLayer2/Cloud1, 'modulate',$ParallaxLayer2/Cloud1.modulate, Color(0,0,0,0), 2, Tween.TRANS_LINEAR,Tween.EASE_IN)
	$Tween.interpolate_property($ParallaxLayer3/Cloud2, 'modulate',$ParallaxLayer3/Cloud2.modulate, Color(0,0,0,0), 2, Tween.TRANS_LINEAR,Tween.EASE_IN)
	$Tween.interpolate_property($ParallaxLayer2/Star1, 'modulate',$ParallaxLayer2/Star1.modulate, Color(1,1,1,1), 2, Tween.TRANS_LINEAR,Tween.EASE_IN)
	$Tween.interpolate_property($ParallaxLayer3/Star2, 'modulate',$ParallaxLayer3/Star2.modulate, Color(1,1,1,1), 2, Tween.TRANS_LINEAR,Tween.EASE_IN)
	$Tween.start()
	pass

func _on_Player_current_height(value):
	if value > space_height:
		change_to_space()
	else:
		set_background_darker(value)
	pass # Replace with function body.
"

[sub_resource type="GDScript" id=6]
script/source = "extends CanvasLayer

var fuel_count : int = 0
export var height_tutorial: int
var tutorial_done : bool = false
var prev_player_magnet = false

func _ready():
	$UI/TransitionScene.play_random_backwards()
	pass

func update_coin_label():
	$UI/UpperPanel/CoinPanel/CoinLabel.text = str(GameManager.coins)
	$UI/UpperPanel/CoinPanel/CoinLabel/CoinControl/Anim.play('AddCoin')
	pass

func update_fishes_label():
	$UI/UpperPanel/FishPanel/FishLabel.text = str(GameManager.fishes)
	$UI/UpperPanel/FishPanel/FishLabel/FishControl/Anim.play('AddFish')
	pass

func update_meters_label():
	$UI/UpperPanel/MeterPanel/MeterLabel.text = str(GameManager.player_height)
	pass

func update_UI_labels():
	update_coin_label()
	update_fishes_label()
	update_meters_label()
	pass

func _on_PauseButton_button_down():
	set_pause_game(true)
	pass # Replace with function body.

func set_pause_game(val):
	$UI/PauseButton.disabled = val
	$UI/PauseButton.pressed = val
	if val:
		$UI/PausePanel/Anim.play('PausePanel')
	get_tree().paused = val
	pass

func show_deadpanel(score, highscorepassed):
	$UI/DeadPanel.init(score, highscorepassed)
	$UI/PauseButton.hide()
	pass

func exit_play():
	$UI/TransitionScene.play_random()
	pass

func _on_Anim_animation_finished(anim_name):
	if !$UI/TransitionScene.has_played:
		get_tree().change_scene('res://Scenes/MainMenu.tscn')
	pass # Replace with function body.

func add_fuel(val):
	$UI/FuelBar.add_fuel()
	fuel_count = val
	pass

func set_tutorial_done():
	$UI/Tutorial/InitialTap.hide()
	get_parent().get_node('Player').disable_tutorial()
	pass

func _on_Player_current_height(value):
	if !tutorial_done and value >= height_tutorial:
		tutorial_done = true
		$UI/Tutorial/InitialTap/Anim.play('End')
		get_parent().get_node('Player').hide_tutorial_arrow()
	pass # Replace with function body.

func _on_Player_on_magnet(val):
	if val:
		if !prev_player_magnet:
			prev_player_magnet = true
			$UI/UpperPanel/MagnetPanel/Anim.play('Enter')
		else:
			$UI/UpperPanel/MagnetPanel/Anim.play('Reset')
	else:
		$UI/UpperPanel/MagnetPanel/Anim.play_backwards('Enter')
		prev_player_magnet = false
	pass # Replace with function body.

func _on_Player_magnet_time(val):
	$UI/UpperPanel/MagnetPanel/Panel/Label.text = str(floor(val))
	pass # Replace with function body.

func _on_TransitionScene_finished():
	$UI/UpperPanel/Anim.play('StartRound')
	pass # Replace with function body.

func _on_PausePanel_on_continue():
	$UI/PausePanel/Anim.play_backwards('PausePanel')
	$UI/PauseTimer/Anim.play('Countdown')
	pass # Replace with function body.

func _on_PausePanel_on_home():
	exit_play()
	pass # Replace with function body.

func _on_PausePanel_on_config():
	$UI/ConfigPanel.show()
	$UI/ConfigPanel.init()
	pass # Replace with function body.

func _on_Player_invencible(val):
	if val:
		$UI/UpperPanel/AegisPanel/Anim.play(\"Enter\")
	else:
		$UI/UpperPanel/AegisPanel/Anim.play_backwards(\"Enter\")
	pass # Replace with function body.
"

[sub_resource type="DynamicFont" id=7]
size = 86
use_filter = true
font_data = ExtResource( 11 )

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0.705882, 0.137255, 0.0745098, 1 )
border_width_top = 10
border_width_right = 10
border_width_bottom = 10
border_color = Color( 0.407843, 0.0941176, 0.141176, 1 )
corner_radius_top_right = 50
corner_radius_bottom_right = 50
corner_detail = 2
expand_margin_left = 30.0
expand_margin_right = 110.0
shadow_color = Color( 0, 0, 0, 0.235294 )
shadow_size = 6

[sub_resource type="StyleBoxFlat" id=9]
bg_color = Color( 0.705882, 0.137255, 0.0745098, 1 )
border_width_top = 10
border_width_right = 10
border_width_bottom = 10
border_color = Color( 0.407843, 0.0941176, 0.141176, 1 )
corner_radius_top_right = 50
corner_radius_bottom_right = 50
corner_detail = 2
expand_margin_left = 30.0
expand_margin_right = 40.0
shadow_color = Color( 0, 0, 0, 0.235294 )
shadow_size = 6

[sub_resource type="DynamicFont" id=10]
size = 80
use_filter = true
extra_spacing_top = 6
font_data = ExtResource( 11 )

[sub_resource type="Animation" id=11]
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("Panel:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 0.6 ),
"transitions": PoolRealArray( 0.5, 1, 1 ),
"update": 0,
"values": [ Vector2( 29.5, 9 ), Vector2( 240, 9 ), Vector2( 230, 9 ) ]
}

[sub_resource type="Animation" id=12]
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Panel/Label/Icon:rect_size")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.5 ),
"transitions": PoolRealArray( 0.5, 1, 1 ),
"update": 0,
"values": [ Vector2( 77, 72 ), Vector2( 150, 150 ), Vector2( 77, 72 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Panel/Label/Icon:rect_rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ -44.9999, -15.0, -44.9999 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Panel/Label:custom_colors/font_color")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 0.654902, 0, 1 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=13]
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("Panel:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 0.6 ),
"transitions": PoolRealArray( 0.5, 1, 1 ),
"update": 0,
"values": [ Vector2( 29.5, 9 ), Vector2( 240, 9 ), Vector2( 230, 9 ) ]
}

[sub_resource type="DynamicFont" id=14]
size = 72
outline_color = Color( 0, 0, 0, 1 )
use_filter = true
extra_spacing_char = 2
font_data = ExtResource( 11 )

[sub_resource type="Animation" id=15]
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Coin:rect_scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3, 0.5 ),
"transitions": PoolRealArray( 0.5, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1.8, 1.8 ), Vector2( 1, 1 ) ]
}

[sub_resource type="StyleBoxFlat" id=16]
bg_color = Color( 0.705882, 0.137255, 0.0745098, 1 )
border_width_left = 10
border_width_top = 10
border_width_bottom = 10
border_color = Color( 0.407843, 0.0941176, 0.141176, 1 )
corner_radius_top_left = 50
corner_radius_bottom_left = 50
corner_detail = 2
expand_margin_left = 120.0
expand_margin_right = 30.0
expand_margin_top = 6.0
expand_margin_bottom = 6.0
shadow_color = Color( 0, 0, 0, 0.215686 )
shadow_size = 6

[sub_resource type="DynamicFont" id=17]
size = 72
use_filter = true
extra_spacing_char = 2
font_data = ExtResource( 11 )

[sub_resource type="Animation" id=18]
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Fish:rect_scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3, 0.5 ),
"transitions": PoolRealArray( 0.5, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1.8, 1.8 ), Vector2( 1, 1 ) ]
}

[sub_resource type="Animation" id=19]
tracks/0/type = "value"
tracks/0/path = NodePath("MeterPanel:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4, 0.6 ),
"transitions": PoolRealArray( 1, 2, 1 ),
"update": 0,
"values": [ Vector2( -190, 10 ), Vector2( 0, 10 ), Vector2( -10, 10 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("CoinPanel:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3, 0.6, 0.8 ),
"transitions": PoolRealArray( 0.5, 0.5, 2, 1 ),
"update": 0,
"values": [ Vector2( 1200, 10 ), Vector2( 1200, 10 ), Vector2( 790, 10 ), Vector2( 798, 10 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("FishPanel:rect_position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.5, 0.8, 1 ),
"transitions": PoolRealArray( 1, 0.5, 2, 1 ),
"update": 0,
"values": [ Vector2( 1200, 140 ), Vector2( 1200, 140 ), Vector2( 780, 140 ), Vector2( 798, 140 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("../FuelBar:rect_position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.3, 0.7, 0.8 ),
"transitions": PoolRealArray( 1, 0.5, 1, 1 ),
"update": 0,
"values": [ Vector2( -150, 700 ), Vector2( -150, 700 ), Vector2( 20, 700 ), Vector2( 10, 700 ) ]
}

[sub_resource type="DynamicFont" id=20]
size = 400
outline_size = 20
outline_color = Color( 0, 0, 0, 1 )
use_filter = true
font_data = ExtResource( 11 )

[sub_resource type="Animation" id=21]
length = 3.5
tracks/0/type = "value"
tracks/0/path = NodePath(".:text")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1.5, 2.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ "3", "3", "2", "1" ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 0.6, 1.3, 1.5, 1.6, 2.3, 2.5, 2.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 549.258, 780 ), Vector2( 410, 680 ), Vector2( 431, 720 ), Vector2( 431, 720 ), Vector2( 410, 680 ), Vector2( 431, 720 ), Vector2( 431, 720 ), Vector2( 410, 680 ), Vector2( 431, 720 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:rect_scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.5, 0.6, 1.3, 1.5, 1.6, 2.3, 2.5, 2.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0.2, 0.2 ), Vector2( 1.2, 1.2 ), Vector2( 1, 1 ), Vector2( 1, 1 ), Vector2( 1.2, 1.2 ), Vector2( 1, 1 ), Vector2( 1, 1 ), Vector2( 1.2, 1.2 ), Vector2( 1, 1 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath(".:self_modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/4/type = "method"
tracks/4/path = NodePath("../..")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 3.5 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ false ],
"method": "set_pause_game"
} ]
}
tracks/5/type = "value"
tracks/5/path = NodePath(".:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 3.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[sub_resource type="Animation" id=22]
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("LPaw:self_modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0.67451 ), Color( 1, 1, 1, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("RPaw:self_modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0.67451 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=23]
length = 0.7
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("LPaw:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 0.5, 0.5 ),
"update": 0,
"values": [ 0.0, 30.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("RPaw:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 0.5, 0.5 ),
"update": 0,
"values": [ -30.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("RPaw:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 3.625, 3.625 ), Vector2( 3.2, 3.2 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("LPaw:scale")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 3.625, 3.625 ), Vector2( 3.2, 3.2 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("RPaw:frame")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.1, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 1, 0, 0 ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("LPaw:frame")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 0.3, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 0 ]
}

[sub_resource type="Animation" id=24]
length = 1.6
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -59.9999, -720.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.8, 1.6 ),
"transitions": PoolRealArray( 2, 0.5, 1 ),
"update": 0,
"values": [ Vector2( 3.81007, 3.81007 ), Vector2( 31.1765, 31.1765 ), Vector2( 0.1, 0.1 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:self_modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 0 ), Color( 0, 0, 0, 1 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Sprite:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 1.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[sub_resource type="DynamicFont" id=25]
size = 32
font_data = ExtResource( 11 )

[sub_resource type="DynamicFont" id=26]
size = 32
font_data = ExtResource( 11 )

[sub_resource type="GDScript" id=27]
script/source = "extends Node

enum SPAWN_TYPE {COLLECTABLE, ENEMY}
export (SPAWN_TYPE) var spawn_type
export (Array, String) var items
export (Array, float) var items_prob
export (Array, int) var items_max_height
export (NodePath) var pool_manager
export (NodePath) var parent_node
export (NodePath) var spawn_points
export var activated : bool = true
export var max_height : int = 14
export var min_height : int = 10
export var invencible_decrease : int = 5
var height_spawn : int
var pos_player_last_spawn : int
var item_prob : float = 0
var enemy_idx : int = 0
export var tutorial_height : int = 0

func _process(delta):
	if check_can_spawn():
		spawn_item()
	pass

func spawn_item():
	var item_pos : Vector2 = get_node(spawn_points).get_children()[randi()%get_node(spawn_points).get_child_count()].position
	item_pos.y = GameManager.camera.global_position.y - get_viewport().get_visible_rect().size.y
	pos_player_last_spawn = GameManager.player_height
	var item = get_node(pool_manager).get_object_by_name(get_random_item())
	if item:
		item.call_deferred('set_global_position',item_pos)
		get_node(parent_node).add_child(item)
		item.set_active(true)
		get_new_height()
	pass

func get_random_item():
	match spawn_type:
		SPAWN_TYPE.COLLECTABLE:
			return get_collectable()
		SPAWN_TYPE.ENEMY:
			return get_enemy()

func get_collectable():
	var item_name : String = ''
	item_prob = rand_range(0,1)
	for i in range(items.size()):
		if item_prob < items_prob[i]:
			item_name = items[i]
			break
	if item_name.empty():
		item_name = items[items.size()-1]
	return item_name

func get_enemy():
	return items[enemy_idx]

func get_new_height():
	height_spawn = min_height + randi() % max_height
	pass

func check_can_spawn(): 
	return activated and GameManager.player_height > height_spawn + pos_player_last_spawn and GameManager.player_height > tutorial_height

func set_can_spawn():
	activated = !activated
	pass

func _on_Player_invencible(val):
	if val:
		max_height -= invencible_decrease
		min_height -= invencible_decrease
	else:
		max_height += invencible_decrease
		min_height += invencible_decrease
	pass # Replace with function body.

func _on_Player_current_height(value):
	update_enemy_index(value)
	pass # Replace with function body.

func update_enemy_index(player_height):
	if player_height > items_max_height[enemy_idx]:
		enemy_idx += 1
	if enemy_idx >= items.size():
		enemy_idx -= 1
	pass

func _on_Player_invencible_Enemy_Spawner(val):
	activated = !val
	pass # Replace with function body.
"

[sub_resource type="GDScript" id=28]
script/source = "extends Node2D

export (Array, PackedScene) var objects_scene_list
export var objects_number : int

func _ready():
	create_objects()
	pass

func create_objects():
	if !objects_scene_list.empty():
		for object_scene in objects_scene_list:
			for i in range(objects_number):
				var object = object_scene.instance()
				call_deferred('add_child',object)
				object.call_deferred('set_active',false)
				object.call_deferred('set_global_position',Vector2(-900,-900))
				object.connect('dispose',self,'return_object')
	pass

func get_object_by_name(obj_name : String):
	var object = null
	var children_list = get_children()
	children_list.shuffle()
	for obj in children_list:
		if obj.name.find(obj_name) >= 0 and !obj.activated:
			object = obj
			break
	if object:
		remove_child(object)
	return object

func return_object(obj):
	obj.get_parent().call_deferred('remove_child',obj)
	obj.set_active(false)
	obj.call_deferred('set_global_position',Vector2(-900,-900))
	call_deferred('add_child',obj)
"

[node name="GameScene" type="Node"]
script = SubResource( 1 )
house_broken = ExtResource( 1 )

[node name="House" type="Node2D" parent="."]
script = SubResource( 2 )

[node name="House" type="Sprite" parent="House"]
position = Vector2( 541.563, 143.5 )
scale = Vector2( 2.23267, 2.39453 )
texture = ExtResource( 2 )

[node name="StaticBody2D" type="StaticBody2D" parent="House"]
position = Vector2( 542.192, 239.93 )
scale = Vector2( 12, 12 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="House/StaticBody2D"]
shape = SubResource( 3 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="House"]
show_behind_parent = true
position = Vector2( 1067, -180 )
rotation = -1.4071
scale = Vector2( 12, 12 )
amount = 25
lifetime = 2.5
texture = ExtResource( 3 )
emission_shape = 1
emission_sphere_radius = 2.0
spread = 35.0
gravity = Vector2( 0, 0 )
initial_velocity = 20.0
initial_velocity_random = 0.2
angular_velocity = 150.0
angular_velocity_random = 1.0
tangential_accel = 0.5
tangential_accel_random = 1.0
angle = 360.0
angle_random = 1.0
scale_amount = 0.3
scale_amount_random = 0.4
color_ramp = SubResource( 4 )

[node name="VisibilityNotifier2D" type="VisibilityNotifier2D" parent="House"]
position = Vector2( 539.258, -643.115 )

[node name="CatShadow" type="Sprite" parent="House"]
modulate = Color( 0, 0, 0, 0.27451 )
position = Vector2( 542, 88 )
rotation = 3.14159
scale = Vector2( 0.3, 0.1 )
texture = ExtResource( 4 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
script = SubResource( 5 )
space_height = 3000
color_list = [ Color( 0.227451, 0.415686, 0.815686, 1 ), Color( 0.223529, 0.4, 0.772549, 1 ), Color( 0.14902, 0.262745, 0.509804, 1 ), Color( 0.0862745, 0.156863, 0.305882, 1 ), Color( 0.105882, 0.137255, 0.215686, 1 ) ]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2( 1080, 1920 )

[node name="Bg1" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
self_modulate = Color( 0.227451, 0.415686, 0.815686, 1 )
texture = ExtResource( 5 )
centered = false

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 1, 0.2 )
motion_mirroring = Vector2( 0, 1920 )

[node name="Cloud1" type="Sprite" parent="ParallaxBackground/ParallaxLayer2"]
texture = ExtResource( 6 )
centered = false

[node name="Star1" type="Sprite" parent="ParallaxBackground/ParallaxLayer2"]
modulate = Color( 1, 1, 1, 0 )
texture = ExtResource( 7 )
centered = false

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 1, 0.3 )
motion_mirroring = Vector2( 0, 1920 )

[node name="Cloud2" type="Sprite" parent="ParallaxBackground/ParallaxLayer3"]
texture = ExtResource( 8 )
centered = false

[node name="Star2" type="Sprite" parent="ParallaxBackground/ParallaxLayer3"]
self_modulate = Color( 1, 1, 1, 0 )
texture = ExtResource( 9 )
centered = false

[node name="Tween" type="Tween" parent="ParallaxBackground"]

[node name="Player" parent="." instance=ExtResource( 10 )]
position = Vector2( 559.5, 830 )

[node name="UIGame" type="CanvasLayer" parent="."]
script = SubResource( 6 )
height_tutorial = 15

[node name="UI" type="Control" parent="UIGame"]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="UpperPanel" type="Control" parent="UIGame/UI"]
anchor_right = 1.0
margin_bottom = 284.0

[node name="MeterPanel" type="Control" parent="UIGame/UI/UpperPanel"]
margin_left = -190.0
margin_top = 10.0
margin_right = 190.0
margin_bottom = 150.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="MeterLabel" type="Label" parent="UIGame/UI/UpperPanel/MeterPanel"]
anchor_top = 0.5
anchor_bottom = 0.5
margin_left = 20.0
margin_top = -67.0
margin_right = 70.0
margin_bottom = 59.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 7 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 0.25098 )
custom_constants/shadow_offset_x = 6
custom_constants/shadow_offset_y = 6
text = "0"
valign = 1

[node name="MLabel" type="Label" parent="UIGame/UI/UpperPanel/MeterPanel/MeterLabel"]
self_modulate = Color( 1, 0.843137, 0, 1 )
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = 20.0
margin_top = -67.5
margin_right = 78.0
margin_bottom = 67.5
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 7 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 0.25098 )
custom_constants/shadow_offset_x = 6
custom_constants/shadow_offset_y = 6
text = "M"
valign = 1

[node name="MeterPanel" type="Panel" parent="UIGame/UI/UpperPanel/MeterPanel/MeterLabel"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 0
grow_vertical = 0
custom_styles/panel = SubResource( 8 )

[node name="MagnetPanel" type="Control" parent="UIGame/UI/UpperPanel"]
margin_left = -211.298
margin_top = 151.0
margin_right = 212.702
margin_bottom = 275.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="Panel" parent="UIGame/UI/UpperPanel/MagnetPanel"]
show_behind_parent = true
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -182.5
margin_top = -53.0
margin_right = -42.5
margin_bottom = 56.0
grow_horizontal = 0
grow_vertical = 0
custom_styles/panel = SubResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="UIGame/UI/UpperPanel/MagnetPanel/Panel"]
anchor_top = 0.5
anchor_bottom = 0.5
margin_top = -51.5
margin_right = 99.0
margin_bottom = 51.5
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 10 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_outline_modulate = Color( 0, 0, 0, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 0.25098 )
custom_constants/shadow_offset_x = 6
custom_constants/shadow_offset_y = 6
text = "9"
valign = 1

[node name="Icon" type="TextureRect" parent="UIGame/UI/UpperPanel/MagnetPanel/Panel/Label"]
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = -46.6911
margin_top = -39.5
margin_right = 30.3089
margin_bottom = 32.5
rect_rotation = -44.9999
rect_pivot_offset = Vector2( 41, 40 )
texture = ExtResource( 12 )
expand = true
stretch_mode = 6

[node name="Anim" type="AnimationPlayer" parent="UIGame/UI/UpperPanel/MagnetPanel"]
anims/Enter = SubResource( 11 )
anims/Reset = SubResource( 12 )

[node name="AegisPanel" type="Control" parent="UIGame/UI/UpperPanel"]
margin_left = -211.298
margin_top = 275.0
margin_right = 212.702
margin_bottom = 399.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="Panel" parent="UIGame/UI/UpperPanel/AegisPanel"]
show_behind_parent = true
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -182.5
margin_top = -53.0
margin_right = -42.5
margin_bottom = 56.0
grow_horizontal = 0
grow_vertical = 0
custom_styles/panel = SubResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Icon" type="TextureRect" parent="UIGame/UI/UpperPanel/AegisPanel/Panel"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -58.0
margin_top = -51.5
margin_right = 19.0
margin_bottom = 20.5
rect_rotation = -44.9999
rect_pivot_offset = Vector2( 58, 54.5 )
texture = ExtResource( 19 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Anim" type="AnimationPlayer" parent="UIGame/UI/UpperPanel/AegisPanel"]
anims/Enter = SubResource( 13 )

[node name="CoinPanel" type="Control" parent="UIGame/UI/UpperPanel"]
show_behind_parent = true
anchor_left = 1.0
anchor_right = 1.0
margin_left = 120.0
margin_top = 10.0
margin_right = 402.0
margin_bottom = 110.0

[node name="CoinLabel" type="Label" parent="UIGame/UI/UpperPanel/CoinPanel"]
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = -50.0
margin_top = -44.0
margin_right = -11.0
margin_bottom = 60.0
grow_horizontal = 0
grow_vertical = 0
custom_fonts/font = SubResource( 14 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 0.25098 )
custom_constants/shadow_offset_x = 6
custom_constants/shadow_offset_y = 6
text = "9"
align = 2
valign = 1

[node name="CoinControl" type="Control" parent="UIGame/UI/UpperPanel/CoinPanel/CoinLabel"]
anchor_top = 0.5
anchor_bottom = 0.5
margin_left = -70.0
margin_top = -20.0
margin_right = -30.0
margin_bottom = 20.0

[node name="Coin" type="TextureRect" parent="UIGame/UI/UpperPanel/CoinPanel/CoinLabel/CoinControl"]
anchor_top = 0.5
anchor_bottom = 0.5
margin_left = -28.0
margin_top = -47.0
margin_right = 68.0
margin_bottom = 49.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 76, 76 )
rect_pivot_offset = Vector2( 46.5341, 48.5427 )
texture = ExtResource( 13 )
expand = true
stretch_mode = 6

[node name="Anim" type="AnimationPlayer" parent="UIGame/UI/UpperPanel/CoinPanel/CoinLabel/CoinControl"]
anims/AddCoin = SubResource( 15 )

[node name="CoinPanel" type="Panel" parent="UIGame/UI/UpperPanel/CoinPanel/CoinLabel"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 0
grow_vertical = 0
custom_styles/panel = SubResource( 16 )

[node name="FishPanel" type="Control" parent="UIGame/UI/UpperPanel"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 120.0
margin_top = -144.0
margin_right = 402.001
margin_bottom = -44.0

[node name="FishLabel" type="Label" parent="UIGame/UI/UpperPanel/FishPanel"]
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = -50.001
margin_top = -49.0
margin_right = -10.001
margin_bottom = 51.0
grow_horizontal = 0
size_flags_vertical = 1
custom_fonts/font = SubResource( 17 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 0.25098 )
custom_constants/shadow_offset_x = 6
custom_constants/shadow_offset_y = 6
text = "9"
align = 2
valign = 1

[node name="FishControl" type="Control" parent="UIGame/UI/UpperPanel/FishPanel/FishLabel"]
anchor_top = 0.5
anchor_bottom = 0.5
margin_left = -70.0
margin_top = -20.0
margin_right = -30.0
margin_bottom = 20.0

[node name="Fish" type="TextureRect" parent="UIGame/UI/UpperPanel/FishPanel/FishLabel/FishControl"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -48.0
margin_top = -48.0
margin_right = 48.0
margin_bottom = 48.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 96, 96 )
rect_pivot_offset = Vector2( 48, 48 )
texture = ExtResource( 14 )
expand = true
stretch_mode = 6

[node name="Anim" type="AnimationPlayer" parent="UIGame/UI/UpperPanel/FishPanel/FishLabel/FishControl"]
anims/AddFish = SubResource( 18 )

[node name="FishPanel" type="Panel" parent="UIGame/UI/UpperPanel/FishPanel/FishLabel"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 0
grow_vertical = 0
custom_styles/panel = SubResource( 16 )

[node name="Anim" type="AnimationPlayer" parent="UIGame/UI/UpperPanel"]
anims/StartRound = SubResource( 19 )

[node name="PauseButton" type="TextureButton" parent="UIGame/UI"]
pause_mode = 2
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -150.0
margin_top = -150.0
margin_right = -29.0
margin_bottom = -32.0
texture_normal = ExtResource( 15 )
texture_pressed = ExtResource( 16 )
texture_hover = ExtResource( 16 )
texture_disabled = ExtResource( 16 )
texture_focused = ExtResource( 16 )
expand = true
stretch_mode = 5

[node name="FuelBar" parent="UIGame/UI" instance=ExtResource( 17 )]
margin_left = -150.0
margin_right = -1130.0

[node name="PausePanel" parent="UIGame/UI" instance=ExtResource( 18 )]

[node name="PauseTimer" type="Label" parent="UIGame/UI"]
pause_mode = 2
visible = false
self_modulate = Color( 1, 1, 1, 0 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 9.258
margin_top = -180.0
margin_right = 262.258
margin_bottom = 300.0
rect_scale = Vector2( 0.2, 0.2 )
custom_fonts/font = SubResource( 20 )
text = "3"
align = 1

[node name="Anim" type="AnimationPlayer" parent="UIGame/UI/PauseTimer"]
anims/Countdown = SubResource( 21 )

[node name="ConfigPanel" parent="UIGame/UI" instance=ExtResource( 24 )]
visible = false

[node name="DeadPanel" parent="UIGame/UI" instance=ExtResource( 25 )]

[node name="ComboButton" type="TextureButton" parent="UIGame/UI"]
visible = false
margin_left = 10.0
margin_top = 1797.0
margin_right = 160.0
margin_bottom = 1906.0

[node name="Tutorial" type="Control" parent="UIGame/UI"]
visible = false
margin_right = 40.0
margin_bottom = 40.0

[node name="InitialTap" type="Control" parent="UIGame/UI/Tutorial"]
margin_right = 40.0
margin_bottom = 40.0

[node name="Anim" type="AnimationPlayer" parent="UIGame/UI/Tutorial/InitialTap"]
autoplay = "Start"
anims/End = SubResource( 22 )
anims/Start = SubResource( 23 )

[node name="LPaw" type="Sprite" parent="UIGame/UI/Tutorial/InitialTap"]
self_modulate = Color( 1, 1, 1, 0.67451 )
position = Vector2( 186, 1650 )
scale = Vector2( 3.625, 3.625 )
texture = ExtResource( 26 )
offset = Vector2( 0, -24.1379 )
hframes = 2

[node name="RPaw" type="Sprite" parent="UIGame/UI/Tutorial/InitialTap"]
self_modulate = Color( 1, 1, 1, 0.67451 )
position = Vector2( 872, 1650 )
rotation = -0.523599
scale = Vector2( 3.625, 3.625 )
texture = ExtResource( 26 )
offset = Vector2( 2.75862, -24.1379 )
hframes = 2
frame = 1

[node name="InitialDarker" parent="UIGame/UI" instance=ExtResource( 27 )]

[node name="TransitionScene" parent="UIGame/UI" instance=ExtResource( 28 )]

[node name="RestartTransition" type="TextureRect" parent="UIGame/UI"]
visible = false
self_modulate = Color( 0, 0, 0, 0 )
margin_right = 1080.0
margin_bottom = 1920.0
mouse_filter = 2
texture = ExtResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="RestAnim" type="AnimationPlayer" parent="UIGame/UI/RestartTransition"]
anims/Start = SubResource( 24 )

[node name="Sprite" type="Sprite" parent="UIGame/UI/RestartTransition"]
position = Vector2( 530, 950 )
rotation = -1.0472
scale = Vector2( 3.81007, 3.81007 )
texture = ExtResource( 29 )

[node name="DebugPanel" type="Panel" parent="UIGame"]
pause_mode = 2
visible = false
anchor_top = 1.0
anchor_bottom = 1.0
margin_top = -963.0
margin_right = 442.0

[node name="VBoxContainer" type="VBoxContainer" parent="UIGame/DebugPanel"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Invencible" type="Button" parent="UIGame/DebugPanel/VBoxContainer"]
margin_right = 442.0
margin_bottom = 134.0
rect_min_size = Vector2( 0, 64 )
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 25 )
toggle_mode = true
text = "ON/OFF INVENCIBLE"

[node name="Currency" type="Button" parent="UIGame/DebugPanel/VBoxContainer"]
margin_top = 138.0
margin_right = 442.0
margin_bottom = 272.0
rect_min_size = Vector2( 0, 64 )
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 26 )
text = "Currency"

[node name="ResetGame" type="Button" parent="UIGame/DebugPanel/VBoxContainer"]
margin_top = 276.0
margin_right = 442.0
margin_bottom = 410.0
rect_min_size = Vector2( 0, 64 )
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 26 )
text = "RESET GAME STATE"

[node name="ToggleCollectables" type="Button" parent="UIGame/DebugPanel/VBoxContainer"]
margin_top = 414.0
margin_right = 442.0
margin_bottom = 548.0
rect_min_size = Vector2( 0, 64 )
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 26 )
toggle_mode = true
pressed = true
text = "ON/OFF COLLECT"

[node name="ToggleEnemies" type="Button" parent="UIGame/DebugPanel/VBoxContainer"]
margin_top = 552.0
margin_right = 442.0
margin_bottom = 686.0
rect_min_size = Vector2( 0, 64 )
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 26 )
toggle_mode = true
pressed = true
text = "ON/OFF ENEMIES"

[node name="Music" type="Button" parent="UIGame/DebugPanel/VBoxContainer"]
margin_top = 690.0
margin_right = 442.0
margin_bottom = 824.0
rect_min_size = Vector2( 0, 64 )
size_flags_horizontal = 3
size_flags_vertical = 3
custom_fonts/font = SubResource( 26 )
toggle_mode = true
text = "Music NEW/OLD"

[node name="Height" type="LineEdit" parent="UIGame/DebugPanel/VBoxContainer"]
margin_top = 828.0
margin_right = 442.0
margin_bottom = 963.0
rect_min_size = Vector2( 0, 50 )
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Button" type="Button" parent="UIGame/DebugPanel"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -99.9524
margin_top = -31.5034
margin_right = 20.0476
margin_bottom = 36.4966
text = "X"

[node name="SpawnPoints" type="Node2D" parent="."]

[node name="Enemies" type="Node2D" parent="SpawnPoints"]

[node name="Position2D11" type="Position2D" parent="SpawnPoints/Enemies"]
position = Vector2( 550, -340 )

[node name="Position2D12" type="Position2D" parent="SpawnPoints/Enemies"]
position = Vector2( 260, -335 )

[node name="Position2D13" type="Position2D" parent="SpawnPoints/Enemies"]
position = Vector2( 800, -340 )

[node name="Currency" type="Node2D" parent="SpawnPoints"]

[node name="Position2D11" type="Position2D" parent="SpawnPoints/Currency"]
position = Vector2( 549.258, -430 )

[node name="Position2D12" type="Position2D" parent="SpawnPoints/Currency"]
position = Vector2( 400, -290 )

[node name="Position2D13" type="Position2D" parent="SpawnPoints/Currency"]
position = Vector2( 690, -290 )

[node name="Position2D14" type="Position2D" parent="SpawnPoints/Currency"]
position = Vector2( 900, -420 )

[node name="Position2D15" type="Position2D" parent="SpawnPoints/Currency"]
position = Vector2( 190, -411.253 )

[node name="PowerUps" type="Node2D" parent="SpawnPoints"]

[node name="Position2D11" type="Position2D" parent="SpawnPoints/PowerUps"]
position = Vector2( 550, -290 )

[node name="Position2D12" type="Position2D" parent="SpawnPoints/PowerUps"]
position = Vector2( 360, -360 )

[node name="Position2D13" type="Position2D" parent="SpawnPoints/PowerUps"]
position = Vector2( 720, -360 )

[node name="Position2D14" type="Position2D" parent="SpawnPoints/PowerUps"]
position = Vector2( 930, -280 )

[node name="Position2D15" type="Position2D" parent="SpawnPoints/PowerUps"]
position = Vector2( 160, -280 )

[node name="CurrencySpawner" type="Node" parent="."]
script = SubResource( 27 )
items = [ "Fish", "Coin" ]
items_prob = [ 0.2, 1.0 ]
pool_manager = NodePath("../CurrencyPool")
parent_node = NodePath("../Collectables")
spawn_points = NodePath("../SpawnPoints/Currency")
min_height = 8

[node name="PowerUpSpawner" type="Node" parent="."]
script = SubResource( 27 )
items = [ "AegisWings", "Magnet", "FuelCan" ]
items_prob = [ 0.01, 0.22, 1.0 ]
pool_manager = NodePath("../PowerUpPool")
parent_node = NodePath("../Collectables")
spawn_points = NodePath("../SpawnPoints/PowerUps")
max_height = 18
min_height = 12

[node name="EnemySpawner" type="Node" parent="."]
script = SubResource( 27 )
spawn_type = 1
items = [ "PaperPlane", "Kite", "Bulldog", "Bird", "Condor", "Ovni" ]
items_max_height = [ 600, 1000, 1400, 1600, 2000, 3000 ]
pool_manager = NodePath("../EnemyPool")
parent_node = NodePath("../Enemies")
spawn_points = NodePath("../SpawnPoints/Enemies")
max_height = 11
min_height = 8
tutorial_height = 20

[node name="Collectables" type="Node2D" parent="."]

[node name="Enemies" type="Node2D" parent="."]

[node name="CurrencyPool" type="Node2D" parent="."]
script = SubResource( 28 )
objects_scene_list = [ ExtResource( 30 ), ExtResource( 31 ) ]
objects_number = 8

[node name="PowerUpPool" type="Node2D" parent="."]
script = SubResource( 28 )
objects_scene_list = [ ExtResource( 32 ), ExtResource( 33 ), ExtResource( 34 ) ]
objects_number = 3

[node name="EnemyPool" type="Node2D" parent="."]
script = SubResource( 28 )
objects_scene_list = [ ExtResource( 35 ), ExtResource( 36 ), ExtResource( 37 ), ExtResource( 38 ), ExtResource( 20 ), ExtResource( 21 ) ]
objects_number = 5
[connection signal="screen_exited" from="House/VisibilityNotifier2D" to="House" method="_on_VisibilityNotifier2D_screen_exited"]
[connection signal="current_height" from="Player" to="UIGame" method="_on_Player_current_height"]
[connection signal="current_height" from="Player" to="ParallaxBackground" method="_on_Player_current_height"]
[connection signal="current_height" from="Player" to="." method="_on_Player_current_height"]
[connection signal="current_height" from="Player" to="EnemySpawner" method="_on_Player_current_height"]
[connection signal="dead" from="Player" to="." method="_on_Player_dead"]
[connection signal="invencible" from="Player" to="UIGame" method="_on_Player_invencible"]
[connection signal="invencible" from="Player" to="CurrencySpawner" method="_on_Player_invencible"]
[connection signal="invencible" from="Player" to="EnemySpawner" method="_on_Player_invencible_Enemy_Spawner"]
[connection signal="magnet_time" from="Player" to="UIGame" method="_on_Player_magnet_time"]
[connection signal="on_magnet" from="Player" to="UIGame" method="_on_Player_on_magnet"]
[connection signal="start_playing" from="Player" to="." method="_on_Player_start_playing"]
[connection signal="button_down" from="UIGame/UI/PauseButton" to="UIGame" method="_on_PauseButton_button_down"]
[connection signal="on_config" from="UIGame/UI/PausePanel" to="UIGame" method="_on_PausePanel_on_config"]
[connection signal="on_continue" from="UIGame/UI/PausePanel" to="UIGame" method="_on_PausePanel_on_continue"]
[connection signal="on_home" from="UIGame/UI/PausePanel" to="UIGame" method="_on_PausePanel_on_home"]
[connection signal="restart_game" from="UIGame/UI/DeadPanel" to="." method="_on_DeadPanel_restart_game"]
[connection signal="button_down" from="UIGame/UI/ComboButton" to="." method="_on_ComboButton_button_down"]
[connection signal="finished" from="UIGame/UI/TransitionScene" to="UIGame" method="_on_TransitionScene_finished"]
[connection signal="animation_finished" from="UIGame/UI/TransitionScene/Anim" to="UIGame" method="_on_Anim_animation_finished"]
[connection signal="animation_finished" from="UIGame/UI/RestartTransition/RestAnim" to="." method="_on_RestAnim_animation_finished"]
[connection signal="toggled" from="UIGame/DebugPanel/VBoxContainer/Invencible" to="Player" method="_on_Invencible_toggled"]
[connection signal="button_down" from="UIGame/DebugPanel/VBoxContainer/Currency" to="." method="_on_Currency_button_down"]
[connection signal="button_down" from="UIGame/DebugPanel/VBoxContainer/ResetGame" to="." method="_on_ResetGame_button_down"]
[connection signal="toggled" from="UIGame/DebugPanel/VBoxContainer/ToggleCollectables" to="." method="_on_ToggleCollectables_toggled"]
[connection signal="toggled" from="UIGame/DebugPanel/VBoxContainer/ToggleEnemies" to="." method="_on_ToggleEnemies_toggled"]
[connection signal="toggled" from="UIGame/DebugPanel/VBoxContainer/Music" to="." method="_on_Music_toggled"]
[connection signal="gui_input" from="UIGame/DebugPanel/VBoxContainer/Height" to="." method="_on_Height_gui_input"]
[connection signal="button_down" from="UIGame/DebugPanel/Button" to="." method="_on_Button_button_down"]

[editable path="UIGame/UI/ConfigPanel"]

[editable path="UIGame/UI/TransitionScene"]
