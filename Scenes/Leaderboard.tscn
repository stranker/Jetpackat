[gd_scene load_steps=15 format=2]

[ext_resource path="res://Scenes/Leaderpanel.tscn" type="PackedScene" id=1]
[ext_resource path="res://Sprites/Misc/Ribbon.png" type="Texture" id=2]
[ext_resource path="res://Fonts/retron_80_outlined.tres" type="DynamicFont" id=3]
[ext_resource path="res://Scenes/ItemPageGrid.tscn" type="PackedScene" id=4]
[ext_resource path="res://Sprites/UI/LeaderCat.png" type="Texture" id=5]
[ext_resource path="res://Sprites/UI/NormalButton.png" type="Texture" id=6]
[ext_resource path="res://Sprites/UI/CloseIcon.png" type="Texture" id=7]
[ext_resource path="res://Sounds/Sfx/ButtonClick.wav" type="AudioStream" id=8]
[ext_resource path="res://Sprites/UI/ButtonPressed.png" type="Texture" id=9]
[ext_resource path="res://Fonts/retron_90.tres" type="DynamicFont" id=10]

[sub_resource type="StyleBoxFlat" id=1]
bg_color = Color( 0.172549, 0.172549, 0.172549, 1 )

[sub_resource type="GDScript" id=2]
script/source = "extends Panel

export (PackedScene) var leaderitem_scene

signal leader_closed

func start():
	get_leaderboard_data()
	$Leaders/State.show()
	$Anim.play('Enter')
	$Timer.start()
	pass

func get_leaderboard_data():
	var public_url = 'http://dreamlo.com/lb/5cba6e4a3eba5e041c24a2b4/json'
	$HTTPRequest.request(public_url,[],true,HTTPClient.METHOD_GET)
	connecting()
	pass

func create_panels(data):
	if data:
		if typeof(data) == TYPE_ARRAY:
			$Leaders/State.hide()
			$Leaders/ItemPageGrid.create_leader_items(data)
		if typeof(data) == TYPE_DICTIONARY:
			$Leaders/State.hide()
			var array : Array = []
			array.append(data)
			$Leaders/ItemPageGrid.create_leader_items(array)
	else:
		leader_empty()
	pass

func leader_empty():
	$Leaders/State.text = 'KEY_LEADERBOARD_EMPTY'
	pass

func failed_to_connect():
	$Leaders/State.text = 'KEY_LEADERBOARD_FAILED'
	pass

func connecting():
	$Leaders/State.text = tr('KEY_LEADERBOARD_CONNECTING')

func _on_Anim_animation_finished(anim_name):
	pass # Replace with function body.

func _on_CloseLeaderButton_button_down():
	$Leaders/ItemPageGrid.clear_previous_data()
	$Anim.play_backwards('Enter')
	emit_signal('leader_closed')
	$ButtonClick.play()
	pass # Replace with function body.

func _on_HTTPRequest_request_completed(result, response_code, headers, body):
	if result == HTTPRequest.RESULT_SUCCESS and !$Timer.is_stopped():
		var leaderboard_data = JSON.parse(body.get_string_from_utf8()).result
		var leaderboard_list : Dictionary = leaderboard_data['dreamlo']['leaderboard']
		create_panels(leaderboard_list['entry'])
		$Timer.stop()
	else:
		failed_to_connect()
	pass # Replace with function body.


func _on_Timer_timeout():
	failed_to_connect()
	pass # Replace with function body.
"

[sub_resource type="StyleBoxFlat" id=4]
bg_color = Color( 0.956863, 0.752941, 0.278431, 1 )
border_width_left = 10
border_width_top = 10
border_width_right = 10
border_width_bottom = 10
border_color = Color( 0.941176, 0.423529, 0, 1 )
corner_radius_top_left = 100
corner_radius_top_right = 100
corner_radius_bottom_right = 100
corner_radius_bottom_left = 100
corner_detail = 2
expand_margin_bottom = 5.0

[sub_resource type="Animation" id=6]
resource_name = "Enter"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("Ribbon:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 0.6 ),
"transitions": PoolRealArray( 0.5, 1, 1 ),
"update": 0,
"values": [ Vector2( -1200, 40 ), Vector2( 50, 40 ), Vector2( 30, 40 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Leaders:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 0.6 ),
"transitions": PoolRealArray( 0.5, 1, 1 ),
"update": 0,
"values": [ Vector2( 69.199, 2100 ), Vector2( 70, 440 ), Vector2( 70, 480 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("CloseLeaderButton:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("CloseLeaderButton:disabled")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/4/type = "value"
tracks/4/path = NodePath(".:self_modulate")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("CloseLeaderButton:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Leaders/LeaderCat:rect_position")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 0.5, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 276, 0 ), Vector2( 289.936, -296.26 ), Vector2( 289.936, -280.26 ) ]
}

[node name="Leaderboard" type="Panel"]
self_modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
custom_styles/panel = SubResource( 1 )
script = SubResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}
leaderitem_scene = ExtResource( 1 )

[node name="Ribbon" type="NinePatchRect" parent="."]
self_modulate = Color( 0.705882, 0.137255, 0.0745098, 1 )
anchor_left = 0.5
anchor_right = 0.5
margin_left = -1740.0
margin_top = 40.0
margin_right = -719.0
margin_bottom = 336.0
rect_rotation = -180.0
rect_scale = Vector2( 0.998089, 1 )
rect_pivot_offset = Vector2( 510.5, 148 )
texture = ExtResource( 2 )

[node name="Title" type="Label" parent="Ribbon"]
margin_left = 209.0
margin_top = 103.0
margin_right = 1087.0
margin_bottom = 223.0
rect_rotation = -180.0
rect_pivot_offset = Vector2( 368, 72.5 )
custom_fonts/font = ExtResource( 10 )
custom_colors/font_color = Color( 0.956863, 0.752941, 0.278431, 1 )
text = "LEADERBOARD"
align = 1

[node name="Leaders" type="Panel" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -470.801
margin_top = 1140.0
margin_right = 471.199
margin_bottom = 2451.0
mouse_filter = 1
custom_styles/panel = SubResource( 4 )

[node name="ItemPageGrid" parent="Leaders" instance=ExtResource( 4 )]
margin_bottom = 0.0
packed_scene = ExtResource( 1 )
items_to_show = 10
h_separation = 0

[node name="VBC" parent="Leaders/ItemPageGrid" index="0"]
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 5
size_flags_vertical = 5

[node name="Grid" parent="Leaders/ItemPageGrid/VBC" index="0"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -471.0
margin_top = -605.5
margin_right = 471.0
margin_bottom = 536.5
custom_constants/vseparation = 10

[node name="HBC" parent="Leaders/ItemPageGrid/VBC" index="1"]
margin_top = 1192.0
margin_right = 942.0
margin_bottom = 1311.0

[node name="Prev" parent="Leaders/ItemPageGrid/VBC/HBC" index="0"]
margin_right = 350.0
margin_bottom = 119.0

[node name="PrevButton" parent="Leaders/ItemPageGrid/VBC/HBC/Prev" index="0"]
visible = false

[node name="Page" parent="Leaders/ItemPageGrid/VBC/HBC" index="1"]
margin_left = 354.0
margin_right = 588.0
margin_bottom = 119.0

[node name="Next" parent="Leaders/ItemPageGrid/VBC/HBC" index="2"]
margin_left = 592.0
margin_right = 942.0
margin_bottom = 119.0

[node name="NextButton" parent="Leaders/ItemPageGrid/VBC/HBC/Next" index="0"]
visible = false

[node name="State" type="Label" parent="Leaders"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -440.0
margin_top = -50.5
margin_right = 440.0
margin_bottom = 50.5
custom_fonts/font = ExtResource( 3 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 0.25098 )
custom_constants/shadow_offset_x = 4
custom_constants/shadow_offset_y = 4
align = 1

[node name="LeaderCat" type="TextureRect" parent="Leaders"]
show_behind_parent = true
anchor_left = 0.5
anchor_right = 0.5
margin_left = -195.0
margin_right = 146.0
margin_bottom = 298.0
texture = ExtResource( 5 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CloseLeaderButton" type="TextureButton" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0 )
self_modulate = Color( 0.894118, 0.176471, 0.0980392, 1 )
anchor_left = 1.0
anchor_right = 1.0
margin_left = -130.0
margin_top = 10.0
margin_right = -10.0
margin_bottom = 130.0
mouse_filter = 1
disabled = true
texture_normal = ExtResource( 6 )
texture_pressed = ExtResource( 9 )
expand = true
stretch_mode = 5
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="CloseLeaderButton"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -37.0
margin_top = -43.0
margin_right = 37.0
margin_bottom = 31.0
texture = ExtResource( 7 )
expand = true
stretch_mode = 6

[node name="Anim" type="AnimationPlayer" parent="."]
anims/Enter = SubResource( 6 )

[node name="ButtonClick" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 8 )
bus = "UI"

[node name="HTTPRequest" type="HTTPRequest" parent="."]

[node name="Timer" type="Timer" parent="."]
wait_time = 5.0
[connection signal="button_down" from="CloseLeaderButton" to="." method="_on_CloseLeaderButton_button_down"]
[connection signal="animation_finished" from="Anim" to="." method="_on_Anim_animation_finished"]
[connection signal="request_completed" from="HTTPRequest" to="." method="_on_HTTPRequest_request_completed"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]

[editable path="Leaders/ItemPageGrid"]
