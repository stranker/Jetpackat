[gd_scene load_steps=4 format=2]

[ext_resource path="res://Object/Collectable/Coin.tscn" type="PackedScene" id=1]
[ext_resource path="res://Object/Collectable/Fish.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

export (Array, PackedScene) var item_list
export (Array, float) var probability
enum SPAWN_TYPE {COLLECTABLES, ENEMIES, ORBIT}
export (SPAWN_TYPE) var type 
export var activated : bool = true
export var min_height : float
export var max_height : float
var height_spawn : float
var pos_player_last_spawn : int

# Called when the node enters the scene tree for the first time.
func _ready():
	randomize()
	spawn_item()
	pass # Replace with function body.

func get_new_height():
	height_spawn = rand_range(min_height,max_height)
	pass

func _process(delta):
	if activated:
		if GameManager.player_height > height_spawn + pos_player_last_spawn: 
			spawn_item()

func spawn_item():
	var item = null
	if type == SPAWN_TYPE.COLLECTABLES:
		var item_pos = 0
		var prob = rand_range(0,1)
		var spawned = false
		for i in probability:
			if prob <= i and !spawned:
				item = item_list[item_pos].instance()
				spawned = !spawned
			else:
				item_pos += 1
	else:
		item = item_list[rand_range(0,item_list.size())].instance()
	match type:
		SPAWN_TYPE.COLLECTABLES:
			get_tree().root.get_node('GameScene/Collectables').call_deferred('add_child',item)
		SPAWN_TYPE.ENEMIES:
			get_tree().root.get_node('GameScene/Enemies').call_deferred('add_child',item)
		SPAWN_TYPE.ORBIT:
			get_tree().root.get_node('GameScene/Orbits').call_deferred('add_child',item)
	var new_pos = Vector2()
	new_pos.x = rand_range(100,get_viewport().get_visible_rect().size.x - 100)
	new_pos.y = GameManager.camera.global_position.y - get_viewport().get_viewport().size.y / 2 - 200
	item.position = new_pos
	pos_player_last_spawn = GameManager.player_height
	get_new_height()
	pass

func set_active(val):
	activated = val"

[node name="Spawner" type="Node"]
script = SubResource( 1 )
item_list = [ ExtResource( 1 ), ExtResource( 2 ) ]

[node name="Timer" type="Timer" parent="."]
one_shot = true

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
